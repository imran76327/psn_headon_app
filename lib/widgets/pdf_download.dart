
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:open_file/open_file.dart';
import 'package:intl/intl.dart';
import '../entry/entry_point.dart';
import '../home/home_page.dart';
import '../model/home/roster_model.dart';

class PdfCreatorPage extends StatefulWidget {
  const PdfCreatorPage({
    super.key,
    required this.data,
  });
  final RosterModel data;
  @override
  _PdfCreatorPageState createState() => _PdfCreatorPageState();
}

class _PdfCreatorPageState extends State<PdfCreatorPage> {
  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    _createAndDownloadPdf(); // Trigger the PDF creation on page load
  }

  // Request storage permission if needed (Android specific)
  Future<bool> _requestPermission() async {
    if (Platform.isAndroid && (await Permission.storage.isDenied)) {
      if (Platform.isAndroid &&
          (await Permission.manageExternalStorage.isGranted)) {
        return true;
      }

      if (Platform.isAndroid &&
          (await Permission.manageExternalStorage.isDenied)) {
        // Handle manage external storage permission (Android 11+)
        PermissionStatus manageStorageStatus =
            await Permission.manageExternalStorage.request();
        return manageStorageStatus.isGranted;
      } else {
        // For devices running Android 10 or lower
        PermissionStatus storageStatus = await Permission.storage.request();
        return storageStatus.isGranted;
      }
    }
    return true; // Permission already granted or not Android
  }

  // Create a PDF file
  Future<void> _createAndDownloadPdf() async {
    setState(() {
      isLoading = true;
    });

    if (await _requestPermission()) {
      final pdf = pw.Document();

      // Define the content of the letter
      String formattedDate =
          DateFormat('dd-MM-yyyy').format(widget.data.shiftDate);
      String dateOfLetter = formattedDate;
      String empName = widget.data.employeeName;
      String empId = widget.data.employeeId;
      DateTime shiftDate = widget.data.shiftDate;

      // Add content to the PDF document
      pdf.addPage(
        pw.Page(
          build: (pw.Context context) {
            return pw.Padding(
              padding: const pw.EdgeInsets.all(16),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text('Date: $dateOfLetter',
                      style: const pw.TextStyle(fontSize: 12)),
                  pw.SizedBox(height: 20),
                  pw.Text('Subject: Uninformed Absenteeism',
                      style: pw.TextStyle(
                          fontSize: 14, fontWeight: pw.FontWeight.bold)),
                  pw.SizedBox(height: 20),
                  pw.Text('To,', style: const pw.TextStyle(fontSize: 12)),
                  pw.Text(empName, style: const pw.TextStyle(fontSize: 12)),
                  pw.Text(empId, style: const pw.TextStyle(fontSize: 12)),
                  pw.SizedBox(height: 20),
                  pw.Text('Dear $empName,', style: const pw.TextStyle(fontSize: 12)),
                  pw.SizedBox(height: 10),
                  pw.Text(
                    'It has been observed that you were to be scheduled for work on $shiftDate. '
                    'However, as per the attendance records, it appears that you did not check in for your shift. '
                    'You are hereby warned for the absenteeism.',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.SizedBox(height: 10),
                  pw.Text(
                    'Kindly note that delivery of this letter via any digital format will be considered as your acknowledgment. '
                    'You are to treat this as a warning letter for the absenteeism and are expected to avoid any further instances '
                    'of absenteeism without prior approval. If you believe this is an issue, reach out to our relevant site '
                    'incharge/supervisor.',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.SizedBox(height: 20),
                  pw.Text(
                    'This is an automated letter generated by PSN Supply Chain Solutions Private Limited and it does not require any signatures.',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ],
              ),
            );
          },
        ),
      );

      // Save the PDF file
      final output = await _savePdfFile(pdf);

      // Open or download the PDF file after saving
      if (output != null) {
        _openPdfFile(output);
      }
    } else {
      print("Permission denied");
    }

    setState(() {
      isLoading = false;
    });
    Navigator.pop(context);
  }

  // Save the PDF file to the device
  Future<File?> _savePdfFile(pw.Document pdf) async {
    try {
      final outputDir = await getExternalStorageDirectory();
      final filePath = '${outputDir!.path}/example.pdf';
      final file = File(filePath);

      // Save the PDF to the file
      await file.writeAsBytes(await pdf.save());
      print('PDF saved to $filePath');

      return file;
    } catch (e) {
      print("Error saving PDF: $e");
      return null;
    }
  }

  // Open the PDF file using the default file viewer
  void _openPdfFile(File file) {
    OpenFile.open(file.path);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create PDF Example'),
      ),
      body: Center(
        child: isLoading
            ? const CircularProgressIndicator()
            : Column(
                children: [
                  Text(
                    'PDF created and ready to download!',
                    style: TextStyle(
                        color: Theme.of(context).colorScheme.onPrimary),
                  ),
                  const SizedBox(
                    height: 30,
                  ),
                  ElevatedButton(
                      onPressed: () {
                        _createAndDownloadPdf();
                      },
                      child: Text(
                        "Download Again!!!",
                        style: TextStyle(
                            color: Theme.of(context).colorScheme.onPrimary),
                      )),
                  const SizedBox(
                    height: 30,
                  ),
                  Row(
                    children: [
                      ElevatedButton(
                          onPressed: () {
                            Navigator.pop(context);
                          },
                          child: Text(
                            "Go Back!!!",
                            style: TextStyle(
                                color: Theme.of(context).colorScheme.onPrimary),
                          )),
                      ElevatedButton(
                          onPressed: () {
                            Navigator.pushReplacement(
                              context,
                              MaterialPageRoute(
                                builder: (context) => const EntryScreen(
                                  body: HomePage(),
                                ),
                              ),
                            );
                          },
                          child: Text(
                            "Redirect Home!!!",
                            style: TextStyle(
                                color: Theme.of(context).colorScheme.onPrimary),
                          )),
                    ],
                  ),
                ],
              ),
      ),
    );
  }
}

